name: School Management API Deployment (Dev)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "ap-south-1"
  ECR_REGISTRY: "120569634557.dkr.ecr.ap-south-1.amazonaws.com/school-management"
  IMAGE_TAG: "latest"  # You can change this to a versioning scheme if desired

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: List dev script
        run: ls -R ./dev/script  # List files to ensure they exist
      
      - name: Build Docker image
        run: |
          docker build -t school-management:latest ./api

      - name: Upload dev script
        uses: actions/upload-artifact@v3
        with:
          name: dev-script
          path: ./dev/script  # Ensure this path is correct

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ env.AWS_REGION }}"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Tag and push image to Amazon ECR
        run: |
          docker tag school-management:latest ${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Clean up old images
        run: |
          aws ecr list-images --repository-name school-management --query 'imageIds[?imageTag!=`latest`]' --output json | \
          jq -r '.[].imageTag' | tail -n 
